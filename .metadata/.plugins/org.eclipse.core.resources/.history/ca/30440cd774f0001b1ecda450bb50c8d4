package com.example.aop.aop;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.stereotype.Component;
import org.springframework.util.StopWatch;

import com.example.aop.service.EmployeeManager;

@Aspect
@Component
public class LoggingAspect {
	private static final Logger LOGGER = LogManager.getLogger(LoggingAspect.class);

	// AOP expression for which methods shall be intercepted
	@Around("execution(* getEmployeeById(..)))")
	public Object profileAllMethods(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
		MethodSignature methodSignature = (MethodSignature) proceedingJoinPoint.getSignature();

		// Get intercepted method details
		String className = methodSignature.getDeclaringType().getSimpleName();
		String methodName = methodSignature.getName();

		final StopWatch stopWatch = new StopWatch();

		// Measure method execution time
		stopWatch.start();
		Object result = proceedingJoinPoint.proceed();
		stopWatch.stop();

		// Log method execution time
		LOGGER.info(
				"Execution time of " + className + "." + methodName + " :: " + stopWatch.getTotalTimeMillis() + " ms");

		return result;
	}

	@Before("execution(* getEmployeeById(..)))")
	void beforeAdvice() {

		LOGGER.info("Before execution of getEmployeeById()");
	}

	@Before("execution(* getEmployeeById(..)))")
	void afterAdvice(JoinPoint  joinPoint) {
		
		System.out.println(joinPoint.getSignature());
		EmployeeManager em = (EmployeeManager) joinPoint.getTarget();
		System.out.println(em.toString());

		LOGGER.info("After execution of getEmployeeById()");
	}
}